# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from regen.group.v1alpha1 import query_pb2 as regen_dot_group_dot_v1alpha1_dot_query__pb2


class QueryStub(object):
    """Query is the regen.group.v1alpha1 Query service.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GroupInfo = channel.unary_unary(
                '/regen.group.v1alpha1.Query/GroupInfo',
                request_serializer=regen_dot_group_dot_v1alpha1_dot_query__pb2.QueryGroupInfoRequest.SerializeToString,
                response_deserializer=regen_dot_group_dot_v1alpha1_dot_query__pb2.QueryGroupInfoResponse.FromString,
                )
        self.GroupAccountInfo = channel.unary_unary(
                '/regen.group.v1alpha1.Query/GroupAccountInfo',
                request_serializer=regen_dot_group_dot_v1alpha1_dot_query__pb2.QueryGroupAccountInfoRequest.SerializeToString,
                response_deserializer=regen_dot_group_dot_v1alpha1_dot_query__pb2.QueryGroupAccountInfoResponse.FromString,
                )
        self.GroupMembers = channel.unary_unary(
                '/regen.group.v1alpha1.Query/GroupMembers',
                request_serializer=regen_dot_group_dot_v1alpha1_dot_query__pb2.QueryGroupMembersRequest.SerializeToString,
                response_deserializer=regen_dot_group_dot_v1alpha1_dot_query__pb2.QueryGroupMembersResponse.FromString,
                )
        self.GroupsByAdmin = channel.unary_unary(
                '/regen.group.v1alpha1.Query/GroupsByAdmin',
                request_serializer=regen_dot_group_dot_v1alpha1_dot_query__pb2.QueryGroupsByAdminRequest.SerializeToString,
                response_deserializer=regen_dot_group_dot_v1alpha1_dot_query__pb2.QueryGroupsByAdminResponse.FromString,
                )
        self.GroupAccountsByGroup = channel.unary_unary(
                '/regen.group.v1alpha1.Query/GroupAccountsByGroup',
                request_serializer=regen_dot_group_dot_v1alpha1_dot_query__pb2.QueryGroupAccountsByGroupRequest.SerializeToString,
                response_deserializer=regen_dot_group_dot_v1alpha1_dot_query__pb2.QueryGroupAccountsByGroupResponse.FromString,
                )
        self.GroupAccountsByAdmin = channel.unary_unary(
                '/regen.group.v1alpha1.Query/GroupAccountsByAdmin',
                request_serializer=regen_dot_group_dot_v1alpha1_dot_query__pb2.QueryGroupAccountsByAdminRequest.SerializeToString,
                response_deserializer=regen_dot_group_dot_v1alpha1_dot_query__pb2.QueryGroupAccountsByAdminResponse.FromString,
                )
        self.Proposal = channel.unary_unary(
                '/regen.group.v1alpha1.Query/Proposal',
                request_serializer=regen_dot_group_dot_v1alpha1_dot_query__pb2.QueryProposalRequest.SerializeToString,
                response_deserializer=regen_dot_group_dot_v1alpha1_dot_query__pb2.QueryProposalResponse.FromString,
                )
        self.ProposalsByGroupAccount = channel.unary_unary(
                '/regen.group.v1alpha1.Query/ProposalsByGroupAccount',
                request_serializer=regen_dot_group_dot_v1alpha1_dot_query__pb2.QueryProposalsByGroupAccountRequest.SerializeToString,
                response_deserializer=regen_dot_group_dot_v1alpha1_dot_query__pb2.QueryProposalsByGroupAccountResponse.FromString,
                )
        self.VoteByProposalVoter = channel.unary_unary(
                '/regen.group.v1alpha1.Query/VoteByProposalVoter',
                request_serializer=regen_dot_group_dot_v1alpha1_dot_query__pb2.QueryVoteByProposalVoterRequest.SerializeToString,
                response_deserializer=regen_dot_group_dot_v1alpha1_dot_query__pb2.QueryVoteByProposalVoterResponse.FromString,
                )
        self.VotesByProposal = channel.unary_unary(
                '/regen.group.v1alpha1.Query/VotesByProposal',
                request_serializer=regen_dot_group_dot_v1alpha1_dot_query__pb2.QueryVotesByProposalRequest.SerializeToString,
                response_deserializer=regen_dot_group_dot_v1alpha1_dot_query__pb2.QueryVotesByProposalResponse.FromString,
                )
        self.VotesByVoter = channel.unary_unary(
                '/regen.group.v1alpha1.Query/VotesByVoter',
                request_serializer=regen_dot_group_dot_v1alpha1_dot_query__pb2.QueryVotesByVoterRequest.SerializeToString,
                response_deserializer=regen_dot_group_dot_v1alpha1_dot_query__pb2.QueryVotesByVoterResponse.FromString,
                )
        self.Poll = channel.unary_unary(
                '/regen.group.v1alpha1.Query/Poll',
                request_serializer=regen_dot_group_dot_v1alpha1_dot_query__pb2.QueryPollRequest.SerializeToString,
                response_deserializer=regen_dot_group_dot_v1alpha1_dot_query__pb2.QueryPollResponse.FromString,
                )
        self.PollsByGroup = channel.unary_unary(
                '/regen.group.v1alpha1.Query/PollsByGroup',
                request_serializer=regen_dot_group_dot_v1alpha1_dot_query__pb2.QueryPollsByGroupRequest.SerializeToString,
                response_deserializer=regen_dot_group_dot_v1alpha1_dot_query__pb2.QueryPollsByGroupResponse.FromString,
                )
        self.PollsByCreator = channel.unary_unary(
                '/regen.group.v1alpha1.Query/PollsByCreator',
                request_serializer=regen_dot_group_dot_v1alpha1_dot_query__pb2.QueryPollsByCreatorRequest.SerializeToString,
                response_deserializer=regen_dot_group_dot_v1alpha1_dot_query__pb2.QueryPollsByCreatorResponse.FromString,
                )
        self.VoteForPollByPollVoter = channel.unary_unary(
                '/regen.group.v1alpha1.Query/VoteForPollByPollVoter',
                request_serializer=regen_dot_group_dot_v1alpha1_dot_query__pb2.QueryVoteForPollByPollVoterRequest.SerializeToString,
                response_deserializer=regen_dot_group_dot_v1alpha1_dot_query__pb2.QueryVoteForPollByPollVoterResponse.FromString,
                )
        self.VotesForPollByPoll = channel.unary_unary(
                '/regen.group.v1alpha1.Query/VotesForPollByPoll',
                request_serializer=regen_dot_group_dot_v1alpha1_dot_query__pb2.QueryVotesForPollByPollRequest.SerializeToString,
                response_deserializer=regen_dot_group_dot_v1alpha1_dot_query__pb2.QueryVotesForPollByPollResponse.FromString,
                )
        self.VotesForPollByVoter = channel.unary_unary(
                '/regen.group.v1alpha1.Query/VotesForPollByVoter',
                request_serializer=regen_dot_group_dot_v1alpha1_dot_query__pb2.QueryVotesForPollByVoterRequest.SerializeToString,
                response_deserializer=regen_dot_group_dot_v1alpha1_dot_query__pb2.QueryVotesForPollByVoterResponse.FromString,
                )


class QueryServicer(object):
    """Query is the regen.group.v1alpha1 Query service.
    """

    def GroupInfo(self, request, context):
        """GroupInfo queries group info based on group id.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GroupAccountInfo(self, request, context):
        """GroupAccountInfo queries group account info based on group account address.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GroupMembers(self, request, context):
        """GroupMembers queries members of a group
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GroupsByAdmin(self, request, context):
        """GroupsByAdmin queries groups by admin address.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GroupAccountsByGroup(self, request, context):
        """GroupAccountsByGroup queries group accounts by group id.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GroupAccountsByAdmin(self, request, context):
        """GroupsByAdmin queries group accounts by admin address.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Proposal(self, request, context):
        """Proposal queries a proposal based on proposal id.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ProposalsByGroupAccount(self, request, context):
        """ProposalsByGroupAccount queries proposals based on group account address.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def VoteByProposalVoter(self, request, context):
        """VoteByProposalVoter queries a vote by proposal id and voter.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def VotesByProposal(self, request, context):
        """VotesByProposal queries a vote by proposal.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def VotesByVoter(self, request, context):
        """VotesByVoter queries a vote by voter.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Poll(self, request, context):
        """Poll queries a poll based on poll id.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PollsByGroup(self, request, context):
        """PollsByGroup queries polls based on group id.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PollsByCreator(self, request, context):
        """PollsByCreator queries polls by creator address.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def VoteForPollByPollVoter(self, request, context):
        """VoteForPollByPollVoter queries a vote by poll id and voter.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def VotesForPollByPoll(self, request, context):
        """VotesForPollByPoll queries votes by poll.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def VotesForPollByVoter(self, request, context):
        """VotesForPollByVoter queries votes for poll by voter.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_QueryServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GroupInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GroupInfo,
                    request_deserializer=regen_dot_group_dot_v1alpha1_dot_query__pb2.QueryGroupInfoRequest.FromString,
                    response_serializer=regen_dot_group_dot_v1alpha1_dot_query__pb2.QueryGroupInfoResponse.SerializeToString,
            ),
            'GroupAccountInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GroupAccountInfo,
                    request_deserializer=regen_dot_group_dot_v1alpha1_dot_query__pb2.QueryGroupAccountInfoRequest.FromString,
                    response_serializer=regen_dot_group_dot_v1alpha1_dot_query__pb2.QueryGroupAccountInfoResponse.SerializeToString,
            ),
            'GroupMembers': grpc.unary_unary_rpc_method_handler(
                    servicer.GroupMembers,
                    request_deserializer=regen_dot_group_dot_v1alpha1_dot_query__pb2.QueryGroupMembersRequest.FromString,
                    response_serializer=regen_dot_group_dot_v1alpha1_dot_query__pb2.QueryGroupMembersResponse.SerializeToString,
            ),
            'GroupsByAdmin': grpc.unary_unary_rpc_method_handler(
                    servicer.GroupsByAdmin,
                    request_deserializer=regen_dot_group_dot_v1alpha1_dot_query__pb2.QueryGroupsByAdminRequest.FromString,
                    response_serializer=regen_dot_group_dot_v1alpha1_dot_query__pb2.QueryGroupsByAdminResponse.SerializeToString,
            ),
            'GroupAccountsByGroup': grpc.unary_unary_rpc_method_handler(
                    servicer.GroupAccountsByGroup,
                    request_deserializer=regen_dot_group_dot_v1alpha1_dot_query__pb2.QueryGroupAccountsByGroupRequest.FromString,
                    response_serializer=regen_dot_group_dot_v1alpha1_dot_query__pb2.QueryGroupAccountsByGroupResponse.SerializeToString,
            ),
            'GroupAccountsByAdmin': grpc.unary_unary_rpc_method_handler(
                    servicer.GroupAccountsByAdmin,
                    request_deserializer=regen_dot_group_dot_v1alpha1_dot_query__pb2.QueryGroupAccountsByAdminRequest.FromString,
                    response_serializer=regen_dot_group_dot_v1alpha1_dot_query__pb2.QueryGroupAccountsByAdminResponse.SerializeToString,
            ),
            'Proposal': grpc.unary_unary_rpc_method_handler(
                    servicer.Proposal,
                    request_deserializer=regen_dot_group_dot_v1alpha1_dot_query__pb2.QueryProposalRequest.FromString,
                    response_serializer=regen_dot_group_dot_v1alpha1_dot_query__pb2.QueryProposalResponse.SerializeToString,
            ),
            'ProposalsByGroupAccount': grpc.unary_unary_rpc_method_handler(
                    servicer.ProposalsByGroupAccount,
                    request_deserializer=regen_dot_group_dot_v1alpha1_dot_query__pb2.QueryProposalsByGroupAccountRequest.FromString,
                    response_serializer=regen_dot_group_dot_v1alpha1_dot_query__pb2.QueryProposalsByGroupAccountResponse.SerializeToString,
            ),
            'VoteByProposalVoter': grpc.unary_unary_rpc_method_handler(
                    servicer.VoteByProposalVoter,
                    request_deserializer=regen_dot_group_dot_v1alpha1_dot_query__pb2.QueryVoteByProposalVoterRequest.FromString,
                    response_serializer=regen_dot_group_dot_v1alpha1_dot_query__pb2.QueryVoteByProposalVoterResponse.SerializeToString,
            ),
            'VotesByProposal': grpc.unary_unary_rpc_method_handler(
                    servicer.VotesByProposal,
                    request_deserializer=regen_dot_group_dot_v1alpha1_dot_query__pb2.QueryVotesByProposalRequest.FromString,
                    response_serializer=regen_dot_group_dot_v1alpha1_dot_query__pb2.QueryVotesByProposalResponse.SerializeToString,
            ),
            'VotesByVoter': grpc.unary_unary_rpc_method_handler(
                    servicer.VotesByVoter,
                    request_deserializer=regen_dot_group_dot_v1alpha1_dot_query__pb2.QueryVotesByVoterRequest.FromString,
                    response_serializer=regen_dot_group_dot_v1alpha1_dot_query__pb2.QueryVotesByVoterResponse.SerializeToString,
            ),
            'Poll': grpc.unary_unary_rpc_method_handler(
                    servicer.Poll,
                    request_deserializer=regen_dot_group_dot_v1alpha1_dot_query__pb2.QueryPollRequest.FromString,
                    response_serializer=regen_dot_group_dot_v1alpha1_dot_query__pb2.QueryPollResponse.SerializeToString,
            ),
            'PollsByGroup': grpc.unary_unary_rpc_method_handler(
                    servicer.PollsByGroup,
                    request_deserializer=regen_dot_group_dot_v1alpha1_dot_query__pb2.QueryPollsByGroupRequest.FromString,
                    response_serializer=regen_dot_group_dot_v1alpha1_dot_query__pb2.QueryPollsByGroupResponse.SerializeToString,
            ),
            'PollsByCreator': grpc.unary_unary_rpc_method_handler(
                    servicer.PollsByCreator,
                    request_deserializer=regen_dot_group_dot_v1alpha1_dot_query__pb2.QueryPollsByCreatorRequest.FromString,
                    response_serializer=regen_dot_group_dot_v1alpha1_dot_query__pb2.QueryPollsByCreatorResponse.SerializeToString,
            ),
            'VoteForPollByPollVoter': grpc.unary_unary_rpc_method_handler(
                    servicer.VoteForPollByPollVoter,
                    request_deserializer=regen_dot_group_dot_v1alpha1_dot_query__pb2.QueryVoteForPollByPollVoterRequest.FromString,
                    response_serializer=regen_dot_group_dot_v1alpha1_dot_query__pb2.QueryVoteForPollByPollVoterResponse.SerializeToString,
            ),
            'VotesForPollByPoll': grpc.unary_unary_rpc_method_handler(
                    servicer.VotesForPollByPoll,
                    request_deserializer=regen_dot_group_dot_v1alpha1_dot_query__pb2.QueryVotesForPollByPollRequest.FromString,
                    response_serializer=regen_dot_group_dot_v1alpha1_dot_query__pb2.QueryVotesForPollByPollResponse.SerializeToString,
            ),
            'VotesForPollByVoter': grpc.unary_unary_rpc_method_handler(
                    servicer.VotesForPollByVoter,
                    request_deserializer=regen_dot_group_dot_v1alpha1_dot_query__pb2.QueryVotesForPollByVoterRequest.FromString,
                    response_serializer=regen_dot_group_dot_v1alpha1_dot_query__pb2.QueryVotesForPollByVoterResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'regen.group.v1alpha1.Query', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Query(object):
    """Query is the regen.group.v1alpha1 Query service.
    """

    @staticmethod
    def GroupInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/regen.group.v1alpha1.Query/GroupInfo',
            regen_dot_group_dot_v1alpha1_dot_query__pb2.QueryGroupInfoRequest.SerializeToString,
            regen_dot_group_dot_v1alpha1_dot_query__pb2.QueryGroupInfoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GroupAccountInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/regen.group.v1alpha1.Query/GroupAccountInfo',
            regen_dot_group_dot_v1alpha1_dot_query__pb2.QueryGroupAccountInfoRequest.SerializeToString,
            regen_dot_group_dot_v1alpha1_dot_query__pb2.QueryGroupAccountInfoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GroupMembers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/regen.group.v1alpha1.Query/GroupMembers',
            regen_dot_group_dot_v1alpha1_dot_query__pb2.QueryGroupMembersRequest.SerializeToString,
            regen_dot_group_dot_v1alpha1_dot_query__pb2.QueryGroupMembersResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GroupsByAdmin(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/regen.group.v1alpha1.Query/GroupsByAdmin',
            regen_dot_group_dot_v1alpha1_dot_query__pb2.QueryGroupsByAdminRequest.SerializeToString,
            regen_dot_group_dot_v1alpha1_dot_query__pb2.QueryGroupsByAdminResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GroupAccountsByGroup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/regen.group.v1alpha1.Query/GroupAccountsByGroup',
            regen_dot_group_dot_v1alpha1_dot_query__pb2.QueryGroupAccountsByGroupRequest.SerializeToString,
            regen_dot_group_dot_v1alpha1_dot_query__pb2.QueryGroupAccountsByGroupResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GroupAccountsByAdmin(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/regen.group.v1alpha1.Query/GroupAccountsByAdmin',
            regen_dot_group_dot_v1alpha1_dot_query__pb2.QueryGroupAccountsByAdminRequest.SerializeToString,
            regen_dot_group_dot_v1alpha1_dot_query__pb2.QueryGroupAccountsByAdminResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Proposal(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/regen.group.v1alpha1.Query/Proposal',
            regen_dot_group_dot_v1alpha1_dot_query__pb2.QueryProposalRequest.SerializeToString,
            regen_dot_group_dot_v1alpha1_dot_query__pb2.QueryProposalResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ProposalsByGroupAccount(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/regen.group.v1alpha1.Query/ProposalsByGroupAccount',
            regen_dot_group_dot_v1alpha1_dot_query__pb2.QueryProposalsByGroupAccountRequest.SerializeToString,
            regen_dot_group_dot_v1alpha1_dot_query__pb2.QueryProposalsByGroupAccountResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def VoteByProposalVoter(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/regen.group.v1alpha1.Query/VoteByProposalVoter',
            regen_dot_group_dot_v1alpha1_dot_query__pb2.QueryVoteByProposalVoterRequest.SerializeToString,
            regen_dot_group_dot_v1alpha1_dot_query__pb2.QueryVoteByProposalVoterResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def VotesByProposal(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/regen.group.v1alpha1.Query/VotesByProposal',
            regen_dot_group_dot_v1alpha1_dot_query__pb2.QueryVotesByProposalRequest.SerializeToString,
            regen_dot_group_dot_v1alpha1_dot_query__pb2.QueryVotesByProposalResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def VotesByVoter(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/regen.group.v1alpha1.Query/VotesByVoter',
            regen_dot_group_dot_v1alpha1_dot_query__pb2.QueryVotesByVoterRequest.SerializeToString,
            regen_dot_group_dot_v1alpha1_dot_query__pb2.QueryVotesByVoterResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Poll(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/regen.group.v1alpha1.Query/Poll',
            regen_dot_group_dot_v1alpha1_dot_query__pb2.QueryPollRequest.SerializeToString,
            regen_dot_group_dot_v1alpha1_dot_query__pb2.QueryPollResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PollsByGroup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/regen.group.v1alpha1.Query/PollsByGroup',
            regen_dot_group_dot_v1alpha1_dot_query__pb2.QueryPollsByGroupRequest.SerializeToString,
            regen_dot_group_dot_v1alpha1_dot_query__pb2.QueryPollsByGroupResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PollsByCreator(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/regen.group.v1alpha1.Query/PollsByCreator',
            regen_dot_group_dot_v1alpha1_dot_query__pb2.QueryPollsByCreatorRequest.SerializeToString,
            regen_dot_group_dot_v1alpha1_dot_query__pb2.QueryPollsByCreatorResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def VoteForPollByPollVoter(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/regen.group.v1alpha1.Query/VoteForPollByPollVoter',
            regen_dot_group_dot_v1alpha1_dot_query__pb2.QueryVoteForPollByPollVoterRequest.SerializeToString,
            regen_dot_group_dot_v1alpha1_dot_query__pb2.QueryVoteForPollByPollVoterResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def VotesForPollByPoll(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/regen.group.v1alpha1.Query/VotesForPollByPoll',
            regen_dot_group_dot_v1alpha1_dot_query__pb2.QueryVotesForPollByPollRequest.SerializeToString,
            regen_dot_group_dot_v1alpha1_dot_query__pb2.QueryVotesForPollByPollResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def VotesForPollByVoter(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/regen.group.v1alpha1.Query/VotesForPollByVoter',
            regen_dot_group_dot_v1alpha1_dot_query__pb2.QueryVotesForPollByVoterRequest.SerializeToString,
            regen_dot_group_dot_v1alpha1_dot_query__pb2.QueryVotesForPollByVoterResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
